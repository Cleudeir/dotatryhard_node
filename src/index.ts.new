import server from "./class/Server";
import player from "./player";
import ranking from "./ranking";
import Revalidate from "./class/Revalidate";
import dotenv from "dotenv";
import infos from "./infos";
import avgGlobal from "./components/query/avgGlobal";
import start from "./components/Steam/_index";
import fsPromises from "fs/promises";
import fs from "fs";
import os from "os";
import Db from "./class/Db";

dotenv.config();
const userHomeDir = os.homedir();

// Create temp directory if it doesn't exist
const dir = userHomeDir + "/temp";
if (!fs.existsSync(dir)) {
  fs.mkdirSync(dir);
}

async function init() {
  try {
    // Initialize database first
    await Db.initialize();
    
    // Initialize global averages cache
    const avgGlobalCache = new Revalidate("avgGlobal", 0);
    const globalAverages = await avgGlobalCache.check(avgGlobal);
    console.log("Global averages initialized:", globalAverages);

    // Set up routes
    server.get("/", async (req, res) => {
      res.status(200).json({ status: "online" });
    });

    server.get("/player", async (req, res) => {
      const accountId = Number(req.query.account_id) || undefined;
      if (accountId === undefined) {
        return res.send({ account_id: "undefined" });
      }
      const limit = Number(req.query.limit) || undefined;
      const cacheKey = `player_${accountId}`;
      const cacheTTL = 1 * 10;
      const playerCache = new Revalidate(cacheKey, cacheTTL);
      const result = await playerCache.check(player, {
        account_id: accountId,
        limit,
        _avgGlobal: globalAverages,
      });
      res.send(result);
    });

    server.get("/infos", async (req, res) => {
      const accountId = Number(req.query.account_id) || undefined;
      if (accountId === undefined) {
        return res.send({ account_id: "undefined" });
      }
      const limit = Number(req.query.limit) || undefined;
      const cacheKey = `infos_${accountId}`;
      const cacheTTL = 1 * 10;
      const infosCache = new Revalidate(cacheKey, cacheTTL);
      const result = await infosCache.check(infos, {
        account_id: accountId,
        limit,
      });
      res.send(result);
    });

    const rankingCache = new Revalidate("ranking", 0);
    server.get("/ranking", async (req, res) => {
      const limit = Number(req.query.limit) || undefined;
      const data = await rankingCache.check(ranking, { limit, _avgGlobal: globalAverages });
      res.send({ data, avgGlobal: globalAverages });
    });

    // Start background task
    (async () => {
      const limit = 3000;
      let data = await ranking({ limit, _avgGlobal: globalAverages });
      console.log("Initial ranking data loaded:", data?.length || 0, "entries");
      
      let count: number;
      try {
        const read = String(await fsPromises.readFile(`${userHomeDir}/temp/count.json`));
        const number = Number(JSON.parse(read));
        count = data.length < number ? 0 : number;
      } catch (error) {
        count = 0;
      }
      
      console.log("Starting from count:", count);
      
      async function createCacheInfos(initial?: number) {
        try {
          console.log("Processing:", count + "/" + data.length);
          
          if (data.length < count || data.length === 0) {
            data = await ranking({ limit, _avgGlobal: globalAverages });
            count = 0;    
          }
          
          let accountId = 87683422; // Default account ID
          if (!initial && data?.[count]?.profile?.account_id) {
            accountId = Number(data[count].profile.account_id);
          }
          
          await start(accountId);
          await infos({ account_id: accountId, limit: 200 });
          await player({ account_id: accountId, limit: 20, _avgGlobal: globalAverages });

          count = (count + 1) % 3000;
          
          await fsPromises.writeFile(
            `${userHomeDir}/temp/count.json`,
            JSON.stringify(count)
          );
          
          // Wait before processing next
          await new Promise(resolve => setTimeout(resolve, 10 * 1000));
          await createCacheInfos();
        } catch (error) {
          console.error("Error in cache info update:", error);
          // On error, wait longer before retrying
          await new Promise(resolve => setTimeout(resolve, 30 * 1000));
          await createCacheInfos();
        }
      }

      await createCacheInfos();
    })();

  } catch (error) {
    console.error("Failed to initialize application:", error);
    process.exit(1);
  }
}

// Start the application
init().catch(error => {
  console.error("Fatal error during initialization:", error);
  process.exit(1);
});
